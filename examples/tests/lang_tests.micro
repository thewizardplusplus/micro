let utils load "test_utils";

as(."test"utils):2 "call" fn()
	== 5 + 2 3
;

as(."test"utils):2 "closure" fn()
	fn add(x y)
		+ x y
	;

	== 5 add 2 3
;

as(."test"utils):2 "closure argument" fn()
	fn apply(operation:2 x y)
		operation x y
	;

	== 5 apply fn(x y) + x y; 2 3
;

as(."test"utils):2 "currying" fn()
	fn add(x):1
		fn(y)
			+ x y
		;
	;

	== 5 add 2 3
;

as(."test"utils):2 "cyclic call" fn()
	fn answer()
		fn()
			42
		;
	;

	== 42 answer
;

as(."test"utils):2 "cyclic call of a closure" fn()
	fn add():0:2
		fn():2
			fn(x y)
				fn()
					+ 2 3
				;
			;
		;
	;

	== 5 add 2 3
;

as(."test"utils):2 "recursion" fn()
	fn sum(start end)
		<<@ as(fn _sum(number limit result)
			if < number limit
				>@fn() _sum ++ number limit + result number;
				fn() result;
		;):3 start end 0
	;

	== 8572599 sum 1234 4321
;

as(."test"utils):2 "assignment" fn()
	let number + 2 3;

	== 5 number
;

as(."test"utils):2 "assignment of a closure" fn()
	let add:2 fn(x y)
		+ x y
	;;

	== 5 add 2 3
;

as(."test"utils):2 "reassignment" fn()
	let number 2;
	let number + number 3;

	== 5 number
;

as(."test"utils):2 "cast" fn()
	== 5 as(fn(x y) + x y;):2 2 3
;
