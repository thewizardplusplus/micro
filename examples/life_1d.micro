fn populate_cell(previous_cell current_cell next_cell)
	fn neighbours() + previous_cell next_cell;
	if current_cell
		== 1 neighbours
		== 2 neighbours
;

fn reverse(field)
	fn _reverse(old_field new_field)
		if != $ old_field
			fn() _reverse tail old_field , head old_field new_field;
			fn() new_field;
	;

	_reverse field $
;

fn populate(field)
	fn _populate(old_front_cell old_field old_back_cell new_field)
		if != $ old_field
			fn()
				fn previous_cell() old_front_cell;
				fn current_cell() head old_field;
				fn next_cell()
					if != $ tail old_field
						fn() head tail old_field;
						fn() old_back_cell;
				;
				fn populated_cell()
					populate_cell previous_cell current_cell next_cell
				;
				_populate
					head old_field
					tail old_field
					old_back_cell
					, populated_cell new_field
			;
			fn() new_field;
	;

	reverse _populate 0 field 0 $
;

fn print(field)
	fn _print(field)
		if != $ field
			fn()
				out
					if head field
						"#"
						"."
				_print tail field
			;
			fn();
	;

	|| _print field
	fn() out "\n";
;

fn iterate_populations(number field)
	if != 0 number
		fn()
			fn populated_field() populate field;
			print field

			iterate_populations - number 1 populated_field
		;
		fn();
;

nb http://www.rosettacode.org/wiki/One-dimensional_cellular_automata
iterate_populations 2 ,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0$
