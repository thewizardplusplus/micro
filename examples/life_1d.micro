nb http://www.rosettacode.org/wiki/One-dimensional_cellular_automata

let generate:2 load "libs/list-utils/generate";

fn populate_cell(previous_cell current_cell next_cell)
	let neighbours + previous_cell next_cell;
	if current_cell
		== 1 neighbours
		== 2 neighbours
;

fn get_last_cell(field)
	<<@ as(fn _get_last_cell(field)
		if != [] tail field
			>@fn() _get_last_cell tail field;
			fn() head field;
	;):1 field
;

fn reverse(field)
	<<@ as(fn _reverse(old_field new_field)
		if != [] old_field
			>@fn() _reverse tail old_field , head old_field new_field;
			fn() new_field;
	;):2 field []
;

fn populate(field)
	let front_cell get_last_cell field;
	let back_cell head field;
	reverse <<@ as(fn _populate(
		old_front_cell
		old_field
		old_back_cell
		new_field
	)
		if != [] old_field
			fn()
				let previous_cell old_front_cell;
				let current_cell head old_field;
				let next_cell
					if != [] tail old_field
						fn() head tail old_field;
						fn() old_back_cell;
				;
				let populated_cell
					populate_cell previous_cell current_cell next_cell
				;
				>@fn()
					_populate
						head old_field
						tail old_field
						old_back_cell
						, populated_cell new_field
				;
			;
			fn() new_field;
	;):4 front_cell field back_cell []
;

fn print(field)
	<<@ as(fn _print(field)
		if != [] field
			fn()
				out
					if head field
						"#"
						"."
				>@fn() _print tail field;
			;
			fn();
	;):1 field

	out "\n"
;

fn iterate_populations(field)
	<<@ as(fn _iterate_populations(previous_field field)
		if != previous_field field
			fn()
				print field
				>@fn() _iterate_populations field populate field;
			;
			fn();
	;):2 [] field
;

let field generate 80 fn()
	> random 0.5
;;
iterate_populations field
