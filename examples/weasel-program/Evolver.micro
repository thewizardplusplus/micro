let reduce:3 load "../libs/list/reduce";
let while:3 load "../libs/while";

let Population:2 load "Population";

nb attempts to converge a population based a fitness strategy object
fn Evolver(length generator strategy)
	#"is_acceptable" false
	#"fittest" nil
	#"strategy" strategy
	#"population" Population length generator

	#"run" fn(this handler:2)
		fn iteration_result(generation_number this)
			#"generation_number" generation_number
			#"this" this
		{};

		."this" while iteration_result 0 this fn(result)
			! ."is_acceptable"."this"result
		; fn(result)
			let this as(."do_generation"."this"result):1 ."this"result;
			handler ."generation_number"result this

			iteration_result ++ ."generation_number"result this
		;
	;

	#"do_generation" fn(this)
		let fittest as(."get_fittest"this):1 this;
		let is_acceptable
			as(."is_acceptable"."strategy"this):2
				."strategy"this
				."score"fittest
		;
		let population
			if !is_acceptable
				fn()
					as(."spawn"."population"this):2
						."population"this
						."individual"fittest
				;
				fn() ."population"this;
		;

		#"is_acceptable" is_acceptable
		#"fittest" fittest
		#"population" population
	this;

	#"get_fittest" fn(this)
		reduce ."population"."population"this nil fn(best individual)
			let current_score
				as(."get_score"."strategy"this):2 ."strategy"this individual
			;
			if || == nil best fn()
				as(."is_fitter"."strategy"this):3
					."strategy"this
					current_score
					."score"best
			;
				fn()
					#"score" current_score
					#"individual" individual
				{};
				fn() best;
		;
	;
{};
