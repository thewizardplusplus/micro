let map:2 load "std/list/map";
let reduce:3 load "std/list/reduce";
let filter:2 load "std/list/filter";
let find:2 load "std/list/find";

let make_neighbors:1 load "make_neighbors";
let flatten:1 load "flatten";
let add_to_multiset:2 load "add_to_multiset";
let from_lists:1 load "from_lists";

fn populate_cell(points neighbors_numbers origin_point)
	|| == 3 . origin_point neighbors_numbers
		&& == 2 . origin_point neighbors_numbers != nil find points fn(point)
			== origin_point as(."to_list"point):1 point
		;
;

fn populate(points)
	let neighbors flatten map points fn(point)
		make_neighbors point
	;;
	let neighbors_numbers reduce {} neighbors fn(neighbors_numbers point)
		add_to_multiset neighbors_numbers as(."to_list"point):1 point
	;;
	from_lists filter keys neighbors_numbers fn(origin_point)
		populate_cell points neighbors_numbers origin_point
	;
;
