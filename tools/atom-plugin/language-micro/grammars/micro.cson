'name': 'Micro'
'scopeName': 'source.micro'
'fileTypes': ['micro']
'patterns': [
  # singleline comments
  {
    'match': '\\bnb(?!:)\\b.*'
    'name': 'comment.line.micro'
  }

  # multiline comments
  {
    'begin': '\\bnb:'
    'end': '\\bnb;'
    'name': 'comment.block.micro'
  }

  # numbers (subgroups order is significant)
  {
    'match': '(0x[A-Fa-f0-9]+)|(\\d+(\\.\\d+)?(e-?\\d+)?)'
    'name': 'constant.numeric.micro'
  }

  # symbols
  {
    'match': "'(?:((\\\\.)|(\\\\x[A-Fa-f0-9]{2}))|[^'])'"
    'captures':
      '0':
        'name': 'string.quoted.single.micro'
      '1':
        'name': 'constant.character.escape.micro'
  }

  # strings
  {
    'begin': '\"'
    'end': '\"'
    'name': 'string.quoted.double.micro'
    'patterns': [{
      # escaped symbol (subgroups order is significant)
      'match': '(\\\\x[A-Fa-f0-9]{2})|(\\\\.)'
      'name': 'constant.character.escape.micro'
    }]
  }

  # keywords (it should be described before functions)
  {
    'match': '\\b(fn|let|as)\\b'
    'name': 'keyword.control.statement.micro'
  }

  # built-in functions (it should be described before functions)
  {
    'match': '(?x)\\b(
      load
      | nil
      | false
      | true
      | bool
      | num
      | type
      | floor
      | ceil
      | trunc
      | round
      | sin
      | cos
      | tn
      | arcsin
      | arccos
      | arctn
      | angle
      | pow
      | sqrt
      | exp
      | ln
      | lg
      | abs
      | nan
      | inf
      | is_nan
      | pi
      | e
      | random
      | head
      | tail
      | keys
      | if
      | size
      | str
      | strb
      | strs
      | strl
      | strh
      | strhh
      | args
      | env
      | time
      | sleep
      | in
      | inln
      | out
      | outln
      | err
      | errln
      | exit
    )\\b'
    'name': 'variable.function.micro'
  }

  # unary minus (it should be described before functions)
  {
    'match': '\\b_(?![A-Za-z_])'
    'name': 'variable.function.micro'
  }

  # operators
  {
    'match': '\\(|\\)|:|;|[!#$%&*+,\\-.\\/<=>?@\\[\\\\\\]^`{|}~]+'
    'name': 'keyword.operator.micro'
  }

  # functions
  {
    'match': '[A-Za-z_]+'
    'name': 'entity.name.function.micro'
  }
]
