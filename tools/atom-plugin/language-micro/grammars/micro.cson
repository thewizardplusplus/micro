'name': 'Micro'
'scopeName': 'source.micro'
'fileTypes': ['micro']
'patterns': [
	{
		'comment': 'Singleline comments'
		'match': '\\bnb(?!:)\\b.*'
		'name': 'comment.line.micro'
	}
	{
		'comment': 'Multiline comments'
		'begin': '\\bnb:'
		'end': '\\bnb;'
		'name': 'comment.block.micro'
	}
	{
		'comment': 'Numbers'
		'match': '\\d+(\\.\\d+)?(e-?\\d+)?'
		'name': 'constant.numeric.micro'
	}
	{
		'comment': 'Symbols'
		'match': "'(?:(\\\\.)|(\\\\x[A-Fa-f0-9]{2})|[^'])'"
		'captures':
			'0':
				'name': 'string.quoted.single.micro'
			'1':
				'name': 'constant.character.escape.micro'
			'2':
				'name': 'constant.character.escape.micro'
	}
	{
		'comment': 'Strings'
		'begin': '\"'
		'end': '\"'
		'name': 'string.quoted.double.micro'
		'patterns': [
			{
				'comment': 'Escaped symbol (a subgroups order is significant)'
				'match': '((\\\\x[A-Fa-f0-9]{2})|(\\\\.))'
				'name': 'constant.character.escape.micro'
			}
		]
	}
	{
		'comment': 'Keywords (it should be described before functions)'
		'match': '\\b(fn|let|as)\\b'
		'name': 'keyword.control.statement.micro'
	}
	{
		'comment': 'Built-in functions (it should be described before functions)'
		'match': '\\b(nil|false|true|num|type|arity|apply|floor|ceil|trunc|round|sin|cos|tn|arcsin|arccos|arctn|angle|pow|sqrt|exp|ln|lg|abs|random|head|tail|if|str|strb|strl|env|time|in|out|outln|err|errln|exit)\\b'
		'name': 'variable.function.micro'
	}
	{
		'comment': 'Operators'
		'match': '\\(|\\)|:|;|[!#$%&*+,\\-.\\/<=>?@\\[\\\\\\]^`{|}~]+'
		'name': 'keyword.operator.micro'
	}
	{
		'comment': 'Functions'
		'match': '[A-Za-z_]+'
		'name': 'entity.name.function.micro'
	}
]
