'.source.micro':
	'function':
		'prefix': 'fn'
		'body': 'fn $1($2) $3;$4'
	'assignment':
		'prefix': 'le'
		'body': 'let $1 $2;$3'
	'cast':
		'prefix': 'as'
		'body': 'as($1):$2 $3'
	'condition':
		'prefix': 'if'
		'body': 'if $1\n\tfn() $2;\n\tfn() $3;$4'
	'pack':
		'prefix': '>'
		'body': '>@fn() $1;$2'
	'unpack':
		'prefix': '<'
		'body': '<<@$1'
	'list':
		'prefix': ','
		'body': ',$1[]$2'
	'hash getter':
		'prefix': '.'
		'body': '."$1"$2'
	'hash setter':
		'prefix': '#'
		'body': '#"$1" $2 $3'
	'class constructor':
		'prefix': 'cl'
		'body': 'fn $1($2)\n\t$3\n{};$4'
	'class method':
		'prefix': 'me'
		'body': '#"$1" fn(this $2)\n\t$3\n;$4'
	'list loop':
		'prefix': 'll'
		'body': '''
			fn $1(list)
				<<@ as(fn ${2:_loop}(list result)
					if != [] list
						fn()
							let result result;
							>@fn() ${2:_loop} tail list result;
						;
						fn() result;
				;):2 list nil
			;$3
		'''
