let group:2 load "std/test/group";
let test:2 load "std/test/test";

let make_node:3 ."make_node" load "../index";
let compare_nodes:4 ."compare_nodes" load "../index";
let assert_equality:3 load "../utilities/assert_equality";
let format_differences:1 load "../utilities/format/format_differences";

group "compare_nodes()" fn()
  ,test "should create a node when there's no old node at same place" fn()
    let new_node make_node "input" {} [];
    let difference compare_nodes nil new_node 5 ,"section","form"[];
    let expected
      #"path" ,"section","form"[]
      #"action" "create"
      #"parameters" ,new_node[]
    {};
    assert_equality difference ,expected[] fn(differences)
      format_differences differences
    ;
  ;

  ,test "should remove a node when there's no new node at same place" fn()
    let old_node make_node "input" {} [];
    let difference compare_nodes old_node nil 5 ,"section","form"[];
    let expected
      #"path" ,"section","form"[]
      #"action" "remove"
      #"parameters" ,5[]
    {};
    assert_equality difference ,expected[] fn(differences)
      format_differences differences
    ;
  ;

  ,test "should replace a node when there's a different object at same place" fn()
    let old_node make_node "input" {} [];
    let new_node make_node "textarea" {} [];
    let difference compare_nodes old_node new_node 5 ,"section","form"[];
    let expected
      #"path" ,"section","form"[]
      #"action" "replace"
      #"parameters" ,5,new_node[]
    {};
    assert_equality difference ,expected[] fn(differences)
      format_differences differences
    ;
  ;

  ,test "should replace a node when there's an object and a string at same place" fn()
    let old_node make_node "input" {} [];
    let new_node "text";
    let difference compare_nodes old_node new_node 5 ,"section","form"[];
    let expected
      #"path" ,"section","form"[]
      #"action" "replace"
      #"parameters" ,5,new_node[]
    {};
    assert_equality difference ,expected[] fn(differences)
      format_differences differences
    ;
  ;

  ,test "should replace a node when there's a different string at same place" fn()
    let old_node "text #1";
    let new_node "text #2";
    let difference compare_nodes old_node new_node 5 ,"section","form"[];
    let expected
      #"path" ,"section","form"[]
      #"action" "replace"
      #"parameters" ,5,new_node[]
    {};
    assert_equality difference ,expected[] fn(differences)
      format_differences differences
    ;
  ;

  ,test "should go deeper when there're same nodes at same place" fn()
    let old_node make_node "label" {} , "Message" , make_node "input" {} [] [];
    let new_node make_node "label" {} , "Message" , make_node "textarea" {} [] [];
    let difference compare_nodes old_node new_node 5 ,"section","form"[];
    let expected
      #"path" ,"section","form","label"[]
      #"action" "replace"
      #"parameters" , 1 , make_node "textarea" {} [] []
    {};
    assert_equality difference ,expected[] fn(differences)
      format_differences differences
    ;
  ;

  ,test "should set a property when an old node hasn't a property with same name" fn()
    let old_node make_node "input" #"class""form-control" {} [];
    let new_node make_node "input" #"class""form-control" #"type""email" {} [];
    let difference compare_nodes old_node new_node 5 ,"section","form"[];
    let expected
      #"path" ,"section","form","input"[]
      #"action" "set_property"
      #"parameters" ,"type","email"[]
    {};
    assert_equality difference ,expected[] fn(differences)
      format_differences differences
    ;
  ;

  ,test "should remove a property when a new node hasn't a property with same name" fn()
    let old_node make_node "input" #"class""form-control" #"type""email" {} [];
    let new_node make_node "input" #"class""form-control" {} [];
    let difference compare_nodes old_node new_node 5 ,"section","form"[];
    let expected
      #"path" ,"section","form","input"[]
      #"action" "remove_property"
      #"parameters" ,"type"[]
    {};
    assert_equality difference ,expected[] fn(differences)
      format_differences differences
    ;
  ;

  ,test "should set a property when a property with same name has a different value" fn()
    let old_node make_node "input" #"class""form-control" #"type""username" {} [];
    let new_node make_node "input" #"class""form-control" #"type""email" {} [];
    let difference compare_nodes old_node new_node 5 ,"section","form"[];
    let expected
      #"path" ,"section","form","input"[]
      #"action" "set_property"
      #"parameters" ,"type","email"[]
    {};
    assert_equality difference ,expected[] fn(differences)
      format_differences differences
    ;
  ;
[];
