fn empty_field(size)
	list * size size nil
;'

fn get_index(size x y)
	+ x * y size
;'

fn process_field(size ceils handle)
	= "y" 0
	while fn(_) < y size;' fn(_)
		= "x" 0
		while fn(_) < x size;' fn(_)
			handle size ceils x y
			:= "x" + x 1
		;'

		:= "y" + y 1
	;'
;'

fn rand_field(size)
	= "ceils" empty_field size
	process_field size nil fn(size _ x y)
		= "index" get_index size x y
		= "ceil" > rand 0.5
		:= "ceils" set ceils index ceil
	;'

	ceils
;'

fn print_field(size ceils)
	process_field size ceils fn(size ceils x y)
		= "index" get_index size x y
		= "ceil" get ceils index
		print if ceil "#" " "
		print if == x - size 1 "\n" ""
	;'
;'

fn calculate_neighbors(size ceils)
	= "neighbors" empty_field size
	process_field size ceils fn(size ceils x y)
		= "number" 0
		= "j" - y 1
		while fn(_) <= j + y 1;' fn(_)
			= "i" - x 1
			while fn(_) <= i + x 1;' fn(_)
				if || != i x != j y
					fn(_)
						= "i" % + i size size
						= "j" % + j size size
						= "index" get_index size i j
						= "ceil" get ceils index
						:= "number" + number if ceil 1 0
					;'
					fn(_);'
				nil

				:= "number" number
				:= "i" + i 1
			;'

			:= "number" number
			:= "j" + j 1
		;'

		= "index" get_index size x y
		:= "neighbors" set neighbors index number
	;'

	neighbors
;'

fn next_generation(size ceils neighbors)
	= "next" empty_field size
	process_field size ceils fn(size ceils x y)
		= "index" get_index size x y
		= "ceil" get ceils index
		= "number" get neighbors index
		= "new_ceil"
			|| && !ceil == number 3
			&& ceil || == number 2 == number 3
		:= "next" set next index new_ceil
	;'

	next
;'

= "size" 12
= "ceils" rand_field size
while fn(_) true;' fn(_)
	= "neighbors" calculate_neighbors size ceils
	:= "ceils" next_generation size ceils neighbors

	print_field size ceils
;'
